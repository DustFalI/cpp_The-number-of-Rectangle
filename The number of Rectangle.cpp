#include <bits/stdc++.h>
using namespace std;
int main()
{
	long long m,n,all_num,square_num=0;
	cin>>n>>m;
	all_num = ((m * (m + 1)) / 2) * ((n * (n + 1)) / 2);//所有矩形数量
	for(long long i=1;i<=min(n,m);i++)//正方形数量 
	{
		square_num += (n-i+1) * (m-i+1);
	}
	cout<<square_num<<' '<<all_num - square_num;
	return 0;
}

//思路
//先求所有的矩形数量，再求正方形的数量，长方形数量 = 矩形数量 - 正方形数量

 
//该题设计数学原理：乘法原理和组合
//已知每两条线可以确定一个矩形（无论是否为正方形）
//矩形数量就为（宽的排列组合数量） * （长的排列组合数量）
//例：2 3,宽有三个定点，每两点确定一个线段，所以就有C32种组合即(A32 / A22) -> (3*2 / 2*1) = 3种组合
//长有四个顶点，同理有C42->(A42 / A22) -> (4*3 / 2*1) = 6种组合 
//宽有3种组合，长有6种组合 ，根据乘法原理，一共有3*6=18种组合，所以有18个矩形
//至于正方形，公式为边长为i(1<=i<=min{n,m})的正方形数量为(n-i+1)(m-i+1)
//正方形的原理没有想明白，以后明白了再补充 
